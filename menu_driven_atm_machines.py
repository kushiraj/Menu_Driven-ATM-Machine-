# -*- coding: utf-8 -*-
"""Menu Driven - ATM Machines.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F3_jTV2mrLpDZQVK2Q_1mjhh8xXEPWIy
"""

import sys
class Account:
    def __init__(self):
        self.customer_number = 0
        self.pin_number = 0
        self.checking_balance = 0.0
        self.saving_balance = 0.0

    def set_customer_number(self, customer_number):
        self.customer_number = customer_number
        return customer_number

    def get_customer_number(self):
        return self.customer_number

    def set_pin_number(self, pin_number):
        self.pin_number = pin_number
        return pin_number

    def get_pin_number(self):
        return self.pin_number

    def get_checking_balance(self):
        return self.checking_balance

    def get_saving_balance(self):
        return self.saving_balance

    def calc_checking_withdraw(self, amount):
        self.checking_balance -= amount
        return self.checking_balance

    def calc_saving_withdraw(self, amount):
        self.saving_balance -= amount
        return self.saving_balance

    def calc_checking_deposit(self, amount):
        self.checking_balance += amount
        return self.checking_balance

    def calc_saving_deposit(self, amount):
        self.saving_balance += amount
        return self.saving_balance

    def get_checking_withdraw_input(self):
        print(f"Checking Account Balance: ${self.checking_balance:,.2f}")
        amount = float(input("Amount you want to withdraw from checking account: "))
        if self.checking_balance - amount >= 0:
            self.calc_checking_withdraw(amount)
            print(f"New checking balance: ${self.checking_balance:,.2f}")
        else:
            print("No sufficient amount\n")

    def get_checking_deposit_input(self):
        print(f"Checking Account Balance: ${self.checking_balance:,.2f}")
        amount = float(input("Amount you want to deposit into checking account: "))
        if self.checking_balance + amount >= 0:
            self.calc_checking_deposit(amount)
            print(f"New checking balance: ${self.checking_balance:,.2f}")
        else:
            print("Invalid amount\n")

    def get_saving_withdraw_input(self):
        print(f"Savings Account Balance: ${self.saving_balance:,.2f}")
        amount = float(input("Amount you want to withdraw from savings account: "))
        if self.saving_balance - amount >= 0:
            self.calc_saving_withdraw(amount)
            print(f"New savings balance: ${self.saving_balance:,.2f}")
        else:
            print("No sufficient amount\n")

    def get_saving_deposit_input(self):
        print(f"Savings Account Balance: ${self.saving_balance:,.2f}")
        amount = float(input("Amount you want to deposit into savings account: "))
        if self.saving_balance + amount >= 0:
            self.calc_saving_deposit(amount)
            print(f"New savings balance: ${self.saving_balance:,.2f}")
        else:
            print("Invalid amount\n")

class OptionMenu(Account):
    def __init__(self):
        super().__init__()
        self.data = {
            952141: 191904,
            989947: 71976
        }

    def get_login(self):
        print("Welcome")
        while True:
            try:
                customer_number = int(input("Enter customer number: "))
                pin_number = int(input("Enter your PIN number: "))
                self.set_customer_number(customer_number)
                self.set_pin_number(pin_number)

                if (customer_number in self.data and
                        self.data[customer_number] == pin_number):
                    self.get_account_type()
                else:
                    print("\nWrong customer number or PIN number\n")
            except ValueError:
                print("\nInvalid input. Only numbers are allowed.\n")

    def get_account_type(self):
        print("\nSelect the account type you want to access:")
        print("(1) Checking account")
        print("(2) Saving account")
        print("(3) Exit")
        try:
            selection = int(input("Enter your choice: "))
            if selection == 1:
                self.get_checking()
            elif selection == 2:
                self.get_saving()
            elif selection == 3:
                print("Thank you!")
                sys.exit()
            else:
                print("Invalid choice")
                self.get_account_type()
        except ValueError:
            print("Please enter a valid number.\n")
            self.get_account_type()

    def get_checking(self):
        print("\n(1) View balance")
        print("(2) Withdraw amount")
        print("(3) Deposit amount")
        print("(4) Exit")
        try:
            selection = int(input("Enter your choice: "))
            if selection == 1:
                print(f"Checking account balance: ${self.get_checking_balance():,.2f}")
                self.get_account_type()
            elif selection == 2:
                self.get_checking_withdraw_input()
                self.get_account_type()
            elif selection == 3:
                self.get_checking_deposit_input()
                self.get_account_type()
            elif selection == 4:
                print("Thank you!")
                sys.exit()
            else:
                print("Invalid choice")
                self.get_checking()
        except ValueError:
            print("Please enter a valid number.\n")
            self.get_checking()

    def get_saving(self):
        print("\n(1) View balance")
        print("(2) Withdraw amount")
        print("(3) Deposit amount")
        print("(4) Exit")
        try:
            selection = int(input("Enter your choice: "))
            if selection == 1:
                print(f"Savings account balance: ${self.get_saving_balance():,.2f}")
                self.get_account_type()
            elif selection == 2:
                self.get_saving_withdraw_input()
                self.get_account_type()
            elif selection == 3:
                self.get_saving_deposit_input()
                self.get_account_type()
            elif selection == 4:
                print("Thank you!")
                sys.exit()
            else:
                print("Invalid choice")
                self.get_saving()
        except ValueError:
            print("Please enter a valid number.\n")
            self.get_saving()

if __name__ == "__main__":
    menu = OptionMenu()
    menu.get_login()

